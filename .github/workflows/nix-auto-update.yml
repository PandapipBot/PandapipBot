# SPDX-License-ID: WTFPL
name: Auto Update Nix Packages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'  # Run daily at 6am UTC

jobs:
  update-package:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - gpredict-unstable
          - vscode-extensions.zaaack.markdown-editor
          - vscode-extensions.yzane.markdown-pdf
          - vscode-extensions.reditorsupport.r
          - vscode-extensions.ms-vscode-remote.remote-ssh-edit
          - vscode-extensions.garlicbreadcleric.pandoc-markdown-syntax
          - vscode-extensions.chrischinchilla.vscode-pandoc
          - vscode-extensions.bierner.github-markdown-preview

    env:
      PERSONAL_NIXPKGS_REPO: PandapipBot/nixpkgs
      UPSTREAM_NIXPKGS_REPO: NixOS/nixpkgs
      UPSTREAM_DEFAULT_BRANCH: master
      UPSTREAM_CACHED_BRANCH: nixos-unstable
      BRANCH_PREFIX: auto-update/
      EMAIL: gavinnjohn+githubrobot@gmail.com
      USERNAME: PandapipBot
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Install Mergiraf
        run: |
          # eww snap yuck I should replace this with nix
          sudo snap install mergiraf

      - name: Checkout nixpkgs
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: ${{ env.PERSONAL_NIXPKGS_REPO }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure Git CLI
        run: |
          set -xeuo pipefail
          git config --global user.name "${{ env.USERNAME }}"
          git config --global user.email "{{ env.EMAIL }}"
          git config --global merge.conflictStyle diff3
          git config --global merge.mergiraf.name mergiraf
          git config --global merge.mergiraf.driver 'mergiraf merge --git %O %A %B -s %S -x %X -y %Y -p %P -l %L'
          git config --global core.attributesfile ~/.gitattributes
          echo '* merge=mergiraf' >> ~/.gitattributes
          git remote add upstream "https://github.com/${{ env.UPSTREAM_NIXPKGS_REPO }}.git"
          git fetch --depth 1 upstream "${{ env.UPSTREAM_CACHED_BRANCH }}"
          git reset --hard "upstream/${{ env.UPSTREAM_CACHED_BRANCH }}"

      - name: Get current version
        id: get_current
        run: |
          set -xeuo pipefail
          current_version=$(nix-instantiate --eval -E "with import ./. {}; lib.getVersion ${{ matrix.package }}" | tr -d '"')
          echo "version=$current_version" >> $GITHUB_OUTPUT

      - name: Run update.nix (1st pass)
        run: |
          set -xeuo pipefail
          nix-shell maintainers/scripts/update.nix --argstr package "${{ matrix.package }}" --argstr skip-prompt true

      - name: Get new version
        id: get_new
        run: |
          set -xeuo pipefail
          version=$(nix-instantiate --eval -E "with import ./. {}; lib.getVersion ${{ matrix.package }}" | tr -d '"')
          echo "version=$version" >> $GITHUB_OUTPUT
          git checkout .

      - name: Check existing PRs
        id: check_pr
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const [owner, repo] = process.env.UPSTREAM_NIXPKGS_REPO.split("/");

            let prFound = false;
            let myPrFound = false;
            let existingPr = "";
            let branch = `${process.env.BRANCH_PREFIX}${{ matrix.package }}-${{ steps.get_new.outputs.version }}`;

            let page = 1;
            const perPage = 100;

            while (true) {
              const fetchedPRs = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open',
                per_page: perPage,
                page,
              });

              for (const pr of fetchedPRs.data) {
                if (pr.title.startsWith(`${{ matrix.package }}:`) && pr.title.includes('->')) {
                  console.log(`Found PR:`);
                  console.dir(pr);
                  prFound = true;
                  if (pr.user.login === process.env.USERNAME) {
                    myPrFound = true;
                    existingPr = pr.number.toString();
                    branch = pr.head.ref;
                    break;
                  }
                } else {
                  console.log(`Ignoring PR: ${pr.number}`);
                }
              }

              if (myPrFound || fetchedPRs.data.length < perPage) {
                break;
              }

              page++;
            }

            core.setOutput("pr_found", prFound.toString());
            core.setOutput("my_pr_found", myPrFound.toString());
            core.setOutput("branch", branch);
            core.setOutput("existing_pr", existingPr);

      - name: Switch to branch
        run: |
          set -xeuo pipefail
          if [[ "${{ steps.check_pr.outputs.my_pr_found }}" == "true" ]]; then
            echo "Existing PR branch exists. Rebasing..."
            git fetch --depth 1 origin "${{ steps.check_pr.outputs.branch }}"
            git fetch --depth 1 upstream "${{ env.UPSTREAM_DEFAULT_BRANCH }}"

            FETCH_DEPTH=1
            while true; do
              BASE=$(git merge-base "origin/${{ steps.check_pr.outputs.branch }}" "upstream/${{ env.UPSTREAM_CACHED_BRANCH }}" || echo "")

              if [[ -n "$BASE" ]]; then
                echo "Found merge base: $BASE"
                break
              fi

              FETCH_DEPTH=$(( FETCH_DEPTH * 2 ))
              echo "Fetching to depth $FETCH_DEPTH"
              git fetch --depth $FETCH_DEPTH origin "${{ steps.check_pr.outputs.branch }}"
              git fetch --depth $FETCH_DEPTH upstream "${{ env.UPSTREAM_DEFAULT_BRANCH }}"
            done

            git checkout -b "${{ steps.check_pr.outputs.branch }}" "origin/${{ steps.check_pr.outputs.branch }}"

            if ! git rebase --merge "upstream/${{ env.UPSTREAM_CACHED_BRANCH }}"; then
              echo "Conflict applying commit $commit"
              git status
              git diff
              exit 1
            fi
          else
            echo "Branch does not exist. Creating new from upstream/${{ env.UPSTREAM_CACHED_BRANCH }}..."
            git fetch --depth 1 upstream "${{ env.UPSTREAM_CACHED_BRANCH }}"
            git checkout -b "${{ steps.check_pr.outputs.branch }}" "upstream/${{ env.UPSTREAM_CACHED_BRANCH }}"
          fi

      - name: Run update.nix (2nd pass)
        run: |
          set -xeuo pipefail
          nix-shell maintainers/scripts/update.nix --argstr package "${{ matrix.package }}" --argstr skip-prompt true

      - name: Check diff
        id: check_diff
        run: |
          set -xeuo pipefail
          if git diff --quiet; then
            echo "no changes, skipping."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          set -xeuo pipefail
          git add -u
          git commit -m "${{ matrix.package }}: ${{ steps.get_current.outputs.version }} -> ${{ steps.get_new.outputs.version }}"

      - name: Push changes
        if: steps.check_diff.outputs.changed == 'true' || steps.check_pr.outputs.my_pr_found == 'true'
        run: |
          set -xeuo pipefail
          git push -u origin "${{ steps.check_pr.outputs.branch }}" --force

      - name: Create or update PR
        if: steps.check_diff.outputs.changed == 'true' || steps.check_pr.outputs.my_pr_found == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const [baseOwner, baseRepo] = `${{ env.UPSTREAM_NIXPKGS_REPO }}`.split("/");
            const [headOwner] = `${{ env.PERSONAL_NIXPKGS_REPO }}`.split("/");
            const headBranch = `${{ steps.check_pr.outputs.branch }}`;
            const title = `${{ matrix.package }}: ${{ steps.get_current.outputs.version }} -> ${{ steps.get_new.outputs.version }}`;
            const body = `
            ### Automatic Update for \`${{ matrix.package }}\`
            - **Old version**: \`${{ steps.get_current.outputs.version }}\`
            - **New version**: \`${{ steps.get_new.outputs.version }}\`
            - This PR was generated by a GitHub Actions workflow.
            `;
            const base = 'master';

            const headRef = `${headOwner}:${headBranch}`;

            if ("${{ steps.check_pr.outputs.my_pr_found }}" === "true") {
              core.info(`Updating PR #${{ steps.check_pr.outputs.existing_pr }}...`);
              await github.rest.pulls.update({
                owner: baseOwner,
                repo: baseRepo,
                pull_number: Number("${{ steps.check_pr.outputs.existing_pr }}"),
                title,
                body
              });
            } else if ("${{ steps.check_pr.outputs.pr_found }}" === "false") {
              core.info(`Creating new PR from ${headRef} to ${baseOwner}/${baseRepo}:${base}`);
              await github.rest.pulls.create({
                owner: baseOwner,
                repo: baseRepo,
                title,
                body,
                head: headRef,
                base
              });
            } else {
              core.info("Another PR exists from a different author. Skipping PR creation.");
            }
