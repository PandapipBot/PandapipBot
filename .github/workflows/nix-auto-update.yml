# SPDX-License-ID: WTFPL
# This file contains a large amount of content generated by a language model
# and may not qualify for copyright protection under U.S. law.
# It has been manually reviewed and tweaked; those tweaks might have copyright
# Copy this at your own risk!
# Copyright (if there is any) Gavin John 2025
name: Auto Update Nix Packages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'  # Run daily at 6am UTC

jobs:
  update-package:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: [ gpredict-unstable ]

    env:
      PERSONAL_NIXPKGS_REPO: PandapipBot/nixpkgs
      UPSTREAM_NIXPKGS_REPO: NixOS/nixpkgs
      BRANCH_PREFIX: auto-update/
      USERNAME: PandapipBot
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      GH_DEBUG: "1"

    steps:
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Checkout nixpkgs
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_NIXPKGS_REPO }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure Git and GitHub CLIs
        run: |
          git config --global user.name "PandapipBot"
          git config --global user.email "gavinnjohn+githubrobot@gmail.com"
          git remote add upstream "https://github.com/${{ env.UPSTREAM_NIXPKGS_REPO }}.git"
          git remote set-url origin "https://github.com/${{ env.PERSONAL_NIXPKGS_REPO }}.git"
          gh repo set-default ${{ env.UPSTREAM_NIXPKGS_REPO }}

      - name: Get current version
        id: get_current
        run: |
          current_version=$(nix-instantiate --eval -E "with import ./. {}; lib.getVersion ${{ matrix.package }}" | tr -d '"')
          echo "version=$current_version" >> $GITHUB_OUTPUT

      - name: Run update.nix
        id: update
        run: |
          nix-shell maintainers/scripts/update.nix --argstr package "${{ matrix.package }}" --argstr skip-prompt true

      - name: Check diff
        id: check_diff
        run: |
          if git diff --quiet; then
            echo "no changes, skipping."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Get new version
        if: steps.check_diff.outputs.changed == 'true'
        id: get_new
        run: |
          new_version=$(nix-instantiate --eval -E "with import ./. {}; lib.getVersion ${{ matrix.package }}" | tr -d '"')
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Ensure version was set
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          if [ -z "${{ steps.get_new.outputs.version }}" ]; then
            echo "❌ New version not set. Exiting."
            exit 1
          fi

      - name: Check existing PRs
        if: steps.check_diff.outputs.changed == 'true'
        id: check_pr
        run: |
          prs=$(gh pr list --search "is:open sort:created-desc" --limit 500 --json number,title,author --jq '.[] | select(.title | contains("->")) | select(.title | startswith("${{ matrix.package }}:"))')

          if [ -n "$prs" ]; then
            my_pr=$(echo "$prs" | jq -r --arg user "$USERNAME" 'select(.author.login == $user) | .number')
            if [ -n "$my_pr" ]; then
              echo "Updating existing PR #$my_pr"
              echo "pr_found=true" >> $GITHUB_OUTPUT
              echo "my_pr_found=true" >> $GITHUB_OUTPUT
              echo "existing_pr=$my_pr" >> $GITHUB_OUTPUT
            else
              echo "pr_found=true" >> $GITHUB_OUTPUT
              echo "my_pr_found=false" >> $GITHUB_OUTPUT
              echo "existing_pr=" >> $GITHUB_OUTPUT
            fi
          else
            echo "pr_found=false" >> $GITHUB_OUTPUT
            echo "my_pr_found=false" >> $GITHUB_OUTPUT
            echo "existing_pr=" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create branch and commit changes
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          new_branch="${{ env.BRANCH_PREFIX }}${{ matrix.package }}-${{ steps.get_new.outputs.version }}"
          git checkout -b "$new_branch"
          git add -u
          git commit -m "${{ matrix.package }}: ${{ steps.get_current.outputs.version }} -> ${{ steps.get_new.outputs.version }}"
          git push -u origin "$new_branch" --force

      - name: Create or update PR
        if: steps.check_diff.outputs.changed == 'true'
        run: |
          if [ "${{ steps.check_pr.outputs.my_pr_found }}" == "true" ]; then
            gh pr edit "${{ steps.check_pr.outputs.existing_pr }}" \
              --title "$TITLE" \
              --body "$BODY"
          elif [ "${{ steps.check_pr.outputs.pr_found }}" == "false" ]; then
            gh pr create \
              --title "$TITLE" \
              --body "$BODY" \
              --head "origin:${{ env.BRANCH_PREFIX }}${{ matrix.package }}-${{ steps.get_new.outputs.version }}" \
              --base master
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TITLE: "${{ matrix.package }}: ${{ steps.get_current.outputs.version }} -> ${{ steps.get_new.outputs.version }}"
          BODY: |
            ### Automatic Update for `${{ matrix.package }}`

            - **Old version**: `${{ steps.get_current.outputs.version }}`
            - **New version**: `${{ steps.get_new.outputs.version }}`
            - This PR was generated by a GitHub Actions workflow.
